import json
from textwrap import dedent
from typing import Dict, Any, Optional, List, Union
from lib import DataElem, ToolElem, ManyOptional
from pydantic import Field

### DATA ELEMENTS ###
class Requirement(DataElem):
    _element: str = "req"
    _purpose: str = dedent("""to list a numbered requirement, along with it's description""")
    id: int = Field(
        alias='req_id',
        description="The numbered ID of the requirement (integer only, no alpha characters)"
    )
    details: str = Field(
        alias='req_details',
        description="The detailed description of the requirement"
    )


class Implementation(Requirement):
    _element: str = "imp"
    _purpose= dedent("""
                     to list a numbered requirement, the specifics of how it was implemented, 
                     and whether it was succesfully and fully implemented""")
    analysis: str = Field(
        alias='analysis',
        description=dedent("""
                           Take your time, and think through the following: was this requirement 
                            properly and fully implemented in the source code below?""")
    ),
    is_complete: str = Field(
        alias='is_complete',
        description="Whether the requirement is satisfied in the code (TRUE) or not (FALSE)"
    )


class FilePlaceholder(DataElem):
    _element: str = "test_data"
    name: str = Field(
        alias='file_name',
        description="The name of the test data file to be used in testing."
    )
    description: str = Field(
        alias='file_description',
        description="Description of what the test data file is used for (what kind of data and/or interaction to simulate or test)"
    )

class FunctionalityTest(DataElem):
    _element: str = "test"
    _purpose= dedent("""
                     to list a functionality test case, the ID of the requirement it's mapped to, the details of the test,
                     the name and description of any test data files that are required (IF any are required to simulate a data flow
                     or user interaction for the test case), and finally, what the expected result of this unique test case is.
                     
                     For the test_data elements, these are files that are meant to be used to simulate data flow or user interaction for the 
                     test case ONLY IF the data cannot be programmatically generated during the test. For example, if a specific video file is 
                     required in order to run a test. Some tests may not require test data (for example, pinging a server), and in this case a 
                     test file is obviously not required. Also, if the test data can be generated by the test case/script, then a test data file
                     is not required also. 
                     
                     If no test data files are required, do NOT include this element along with the rest of the elements.""")
    id: int = Field(
        alias='test_id',
        description="The numbered ID of the test"
    )
    rid: int = Field(
        alias='req_id',
        description="The numbered ID of the related requirement being tested"
    )
    title: str = Field(
        alias='test_title',
        description="A unique, brief and descriptive title of the test"
    )
    details: str = Field(
        alias='test_details',
        description="The detailed description of what the test does"
    )
    test_files: ManyOptional[FilePlaceholder] = Field(
        alias="test_data",
        description=dedent("""
                           Optional list of test data files needed to simulate data flow or user interaction for the test case. 
                           Only required if data cannot be programmatically generated during the test"""),
        default=None
    )
    expected_result: str = Field(
        alias='exp_result',
        description="The expected result of running the test"
    )


class TestStatus(DataElem):
    _element: str = "file"
    _purpose= dedent("""to list the status of each functionality test (pass or fail)
                     to""")
    tid: int = Field(alias='test_id', description="The numbered ID of the test that this function is associated with.")
    analysis: str = Field(
        alias='test_imp_analysis', 
        description=dedent("""
                            Take your time, and think through the following: was this test 
                            properly and fully included in the test script below?""")
    ),
    is_complete: str = Field(
        alias='is_complete', 
        description="Whether the test was fully implemented (TRUE) or not (FALSE)"
    ),
    func: str = Field(
        alias='function_name', 
        description=dedent("""
                            Take your time, and think through the following: was this test 
                            included in the test script below?""")
    )


class CodeSegment(DataElem):
    _element: str = "code_segment"
    _purpose = dedent("""
                     to represent a semantically meaningful segment of source code, including its file origin,
                     description, and content""")
    file_name: str = Field(
        alias='file_name',
        description="The name of the source file this segment comes from"
    )
    description: str = Field(
        alias='segment_description',
        description="Detailed description of the segment's functionality and purpose"
    )
    content: str = Field(
        alias='segment_content',
        description="The source code contained within this segment"
    )
    _vector: list[float]


### TOOL ELEMENTS ###
class File(ToolElem):
    _element: str = "file"
    _purpose= dedent("""
                     to list files that need to be created or modified (in their entirety) in order to fullfill the specifications
                     and/or requirements as completely as possible""")
    name: str = Field(
        alias='file_name',
        description="The name of the file to be created or modified"
    )
    content: str = Field(
        alias='file_content',
        description="The complete content to write to the file"
    )


class Command(ToolElem):
    _element: str = "cmd"
    _purpose= dedent("""
                     to list to list commands that need to be run in order to install any required packages or setup/modify the 
                     environment prior to running either the main code or the test code""")
    value: str = Field(
        alias='command',
        description="The CLI command to be executed on the system"
    )
    """
    The below field is used for storing the output of running above shell command.
    It is NOT used by the LLM - which is why it isn't a field. If it was, it 
    would get included automatically in the XML guidelines, and the LLM would 
    hallucinate a value for it...
    """
    _output: str  


class Task(DataElem):
    _element: str = "task"
    _purpose = dedent("""
                     to represent a task that needs to be completed, including its description,
                     conditions, expected elements, constraints, and dependencies""")
    title: str = Field(
        alias='task_title',
        description="The title of the task"
    )
    description: str = Field(
        alias='task_description', 
        description="Detailed description of what the task entails"
    )
    start_condition: str = Field(
        alias='start_condition',
        description="The condition that must be met to start the task"
    )
    end_condition: str = Field(
        alias='end_condition',
        description="The condition that must be met to consider the task complete"
    )
    expected_elements: str = Field(
        alias='expected_elements',
        description="The elements expected to be produced by this task"
    )
    constraints: ManyOptional[List[str]] = Field(
        alias='constraints',
        description="Optional list of constraints that apply to this task",
        default=None
    )
    dependencies: ManyOptional[List[str]] = Field(
        alias='dependencies',
        description="Optional list of dependencies this task relies on",
        default=None
    )
